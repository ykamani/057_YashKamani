# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cq99ZTY9CRi0dxR2lUOD3OJ7dzpq24ud
"""

# evaluate logistic regression on the breast cancer dataset with an one-hot encoding
from numpy import mean
from numpy import std
from pandas import read_csv
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import accuracy_score

# define the location of the dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/breast-cancer.csv"

# load the dataset
dataset = read_csv(url, header=None)

# retrieve the array of data
data = dataset.values

# separate into input and output columns
X = data[:, :-1].astype(str)
y = data[:, -1].astype(str)

print('Input:',X.shape)
print('Output:',y.shape)

# split the dataset into train and test sets
# Roll No. : 057
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.40, random_state=57)

print(X_train)
print(X_test)

# one-hot encode input variables
onehot_encoder = OneHotEncoder(sparse=False,handle_unknown='ignore')
onehot_encoder.fit(X_train)
X_train = onehot_encoder.transform(X_train)
X_test = onehot_encoder.transform(X_test)

# ordinal encode target variable
label_encoder = LabelEncoder()
label_encoder.fit(y_train)
y_train = label_encoder.transform(y_train)
y_test = label_encoder.transform(y_test)

from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier
#Import scikit-learn metrics module for accuracy calculation
from sklearn.metrics  import accuracy_score
#Create a Decision Tree Classifier (using Entropy)
clf_entropy=DecisionTreeClassifier(criterion="entropy")

# Train the model using the training sets
clf_entropy.fit(X_train, y_train)
pred_test = clf_entropy.predict(X_test)
acc= accuracy_score(y_test, pred_test)
print(acc)

# Precession and Recall of the model

from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

precision = precision_score(y_test, pred_test)
recall = recall_score(y_test, pred_test)

print('precision: {}'.format(precision))
print('recall: {}'.format(recall))