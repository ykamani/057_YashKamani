# -*- coding: utf-8 -*-
"""SpamText-NB and DT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xw7-HJDkS0zdlEJ2z0q5P94EHqIXR-BO
"""


import pandas as pd
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import LabelEncoder

stopwords = [ "a", "about", "above", "after", "again", "against", "all", "am", "an", "and", "any", "are", "as", "at", "be", "because", "been", "before", "being", "below", "between", "both", "but", "by", "could", "did", "do", "does", "doing", "down", "during", "each", "few", "for", "from", "further", "had", "has", "have", "having", "he", "he'd", "he'll", "he's", "her", "here", "here's", "hers", "herself", "him", "himself", "his", "how", "how's", "i", "i'd", "i'll", "i'm", "i've", "if", "in", "into", "is", "it", "it's", "its", "itself", "let's", "me", "more", "most", "my", "myself", "nor", "of", "on", "once", "only", "or", "other", "ought", "our", "ours", "ourselves", "out", "over", "own", "same", "she", "she'd", "she'll", "she's", "should", "so", "some", "such", "than", "that", "that's", "the", "their", "theirs", "them", "themselves", "then", "there", "there's", "these", "they", "they'd", "they'll", "they're", "they've", "this", "those", "through", "to", "too", "under", "until", "up", "very", "was", "we", "we'd", "we'll", "we're", "we've", "were", "what", "what's", "when", "when's", "where", "where's", "which", "while", "who", "who's", "whom", "why", "why's", "with", "would", "you", "you'd", "you'll", "you're", "you've", "your", "yours", "yourself", "yourselves" ]

data = pd.read_csv('spam.csv',encoding='latin-1') 
data = data.drop(["Unnamed: 2", "Unnamed: 3", "Unnamed: 4"], axis=1)
data = data.rename(columns={"v1":"label", "v2":"text"})
print(data.describe())
data.groupby("label").describe()

#The dataset contains 4825 ham and 747 spam messages.
#For both classes, some messages appear more than once (common phrases, etc.).

data.label.value_counts()

#Add numerical label for spam
#Target must be numerical for ML classification models
data['spam'] = data['label'].map( {'spam': 1, 'ham': 0} ).astype(int)
data[0:10]

#Add feature: length of message
data['length'] = data['text'].apply(len)
data[0:10]

data_ham  = data[data['spam'] == 0].copy()
data_spam = data[data['spam'] == 1].copy()

#Remove Punctuation and Stopwords
import string
string.punctuation

def remove_punctuation_and_stopwords(sms):
    
    sms_no_punctuation = [ch for ch in sms if ch not in string.punctuation]
    sms_no_punctuation = "".join(sms_no_punctuation).split()
    
    sms_no_punctuation_no_stopwords = \
        [word.lower() for word in sms_no_punctuation if word.lower() not in stopwords]
        
    return sms_no_punctuation_no_stopwords

data['text'].apply(remove_punctuation_and_stopwords)
data['text'][0:10]

from sklearn.feature_extraction.text import CountVectorizer
bow_transformer = CountVectorizer(analyzer = remove_punctuation_and_stopwords).fit(data['text'])
print(len(bow_transformer.vocabulary_))
print(type(bow_transformer.vocabulary_))
bow_transformer.vocabulary_

bow_data = bow_transformer.transform(data['text'])
bow_data.shape

"""##Analysis

To analyze the text data, we have to turn the words into numerical numbers. 
We have multiple choices to accomplish this step: 

1) Binary Term Frequency :  count presence(1) or absence(0) for term in document

2) Bag of Words Frequency:  captures the frequency of term in document

3) Term Frequency: 

4) TFIDF :

in this way, if a term appears frequently in a document, it’s important; if a term appears in many documents, it’s not a unique identifier.

Word2Vec.
"""

from sklearn.feature_extraction.text import TfidfTransformer

tfidf_transformer = TfidfTransformer().fit(bow_data)

sample_ham = data['text'][5]
bow_sample_ham = bow_transformer.transform([sample_ham])
tfidf_sample_ham = tfidf_transformer.transform(bow_sample_ham)
print(tfidf_sample_ham)
print('---------------------------------------')
sample_spam = data['text'][5]
bow_sample_spam = bow_transformer.transform([sample_spam])
tfidf_sample_spam = tfidf_transformer.transform(bow_sample_spam)
print(tfidf_sample_spam)

"""#Next we use CountVectorizer:

More Details and example at:

https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html
"""

#MINOR CORRECTION IN LAB'S CODE:

#BY MISTAKE WE HAVE APPLIED "FIT_TRANSFORM" TO TEST DATA ALSO INSTEAD OF ONLY "TRANSFORM"
#AND WHENEVER WE HAVE CORRECTED IT, THE XTRAIN,XTEST WAS ALREADY MODIFIED
#SO, SIMPLE RERUN YOUR TRAIN_TEST_SPLIT CODE AND NEXT IF YOU TRY WITH THE GIVEN CODE, IT WILL WORK

#Hope You got the Point !!!!!!

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics

from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

"""**Naive Bayes**"""

#import the necessary module
from sklearn.model_selection import train_test_split

data_tfidf = tfidf_transformer.transform(bow_data)

#split data set into train and test sets
data_tfidf_train, data_tfidf_test, label_train, label_test = \
    train_test_split(data_tfidf, data["spam"], test_size=0.3, random_state=57)

data_tfidf_train = data_tfidf_train.A
data_tfidf_test = data_tfidf_test.A

from sklearn.naive_bayes import GaussianNB, MultinomialNB

#Import scikit-learn metrics module for accuracy calculation
from sklearn.metrics  import accuracy_score

spam_detect_model = GaussianNB().fit(data_tfidf_train, label_train)
pred_test_MNB = spam_detect_model.predict(data_tfidf_test)
acc_MNB = accuracy_score(label_test, pred_test_MNB)
print(acc_MNB)

"""**Decision Tree**"""

from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier
#Create a Decision Tree Classifier (using Entropy)
clf_entropy=DecisionTreeClassifier(criterion="entropy")

# Train the model using the training sets
clf_entropy.fit(data_tfidf_train, label_train)
pred_test_MNB = clf_entropy.predict(data_tfidf_test)
acc_MNB = accuracy_score(label_test, pred_test_MNB)
print(acc_MNB)