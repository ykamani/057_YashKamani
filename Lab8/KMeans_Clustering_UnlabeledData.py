# -*- coding: utf-8 -*-
"""KMeans_Clustering_UnlabeledData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EdBgnKMG1LbWnf9c56eP1dFsWyRcKeF6
"""

# 1. Generate data and convert it to a pandas DataFrame

from sklearn.datasets.samples_generator import make_blobs
X, _ = make_blobs(n_samples=100, centers=3, n_features=2, cluster_std=0.2, random_state=57)

# Commented out IPython magic to ensure Python compatibility.
# 2. Basic Data Visualization

import matplotlib.pyplot as plt
# %matplotlib inline

plt.scatter(X[:, 0], X[:, -1])
plt.xlabel('X Coordinates')
plt.ylabel('Y Coordinates')
plt.show()

# 3. Using scikit-learn to perform K-Means clustering

from sklearn.cluster import KMeans

# Specify the number of clusters (3) and fit the data X

kmeans = KMeans(n_clusters=3, random_state=57).fit(X)

# 4. Visualize and evaluate the results

# Get the cluster centroids

kmeans.cluster_centers_

# Get the cluster labels

kmeans.labels_

# Plotting the cluster centers and the data points on a 2D plane

plt.scatter(X[:, 0], X[:, -1], c='green', marker='*')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='+')
plt.title('Data points and cluster centroids')
plt.show()

# 5. Calculate silhouette_score

from sklearn.metrics import silhouette_score

print(silhouette_score(X, kmeans.labels_))

# 6. Determining the value of K using silhouette_score

# Import the KElbowVisualizer method
from yellowbrick.cluster import KElbowVisualizer

# Instantiate a scikit-learn K-Means model
model = KMeans(random_state=57)

# Instantiate the KElbowVisualizer with the number of clusters and the metric
visualizer = KElbowVisualizer(model, k=(2,6), metric='silhouette',timings=False)

# Fit the data and visualize
visualizer.fit(X)
visualizer.poof()