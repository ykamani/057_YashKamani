# -*- coding: utf-8 -*-
"""CNN_Fruits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B1E9LVvxxv4Aapc3_Oj2luHOHJOPOPdX
"""

# importing libraries

import os
from collections import Counter
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# models
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
from PIL import Image
from glob import glob

# to mount a drive
from google.colab import drive

#Mounting the drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
#Setting kaggle configuration directory
os.environ['KAGGLE_CONFIG_DIR'] = "/content/gdrive/My Drive/Colab Notebooks/Kaggle"
# %cd /content/gdrive/My Drive/Colab Notebooks/Kaggle

#Downloading and unzip dataset
!kaggle datasets download -d moltean/fruits
!unzip \*.zip && rm *.zip

# Printing Images
# Setting Training & Test dir paths
train_path = './fruits-360/Training/'
test_path = './fruits-360/Test/'

# Displaying the image
img = load_img(train_path + "Watermelon/r_250_100.jpg", target_size=(100, 100))
plt.imshow(img)
plt.axis("off")
plt.show()

# Printing the shape of the image array 
x = img_to_array(img)
print(x.shape)

# Storing occurences of fruits in a list
fruits = []
fruits_image = []
for i in os.listdir(train_path):
    for image_filename in os.listdir(train_path + i):
        fruits.append(i) 
        fruits_image.append(i + '/' + image_filename)

# Finding top 4 frequent Fruits
newData = Counter(fruits)
frequent_fruits = newData.most_common(4)
print("Top 4 frequent Fruits:")
frequent_fruits

# Finding number of classes
className = glob(train_path + '/*')
number_of_class = len(className)
print(number_of_class)

# Creating the model

model = Sequential()
model.add(Conv2D(32,(3,3),input_shape = x.shape))
model.add(Activation("relu"))
model.add(MaxPooling2D())

model.add(Conv2D(32,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D())

model.add(Conv2D(64,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D())

model.add(Flatten())
model.add(Dense(1024))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(number_of_class)) 
model.add(Activation("softmax"))

# Compiling the model

model.compile(loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = ["accuracy"])

# Getting model's summary

model.summary()

# Specifing epochs & batch size
epochs = 50
batch_size = 64

# Creating an object of ImageDataGenerator.

train_datagen = ImageDataGenerator(rescale= 1./255,
shear_range = 0.3,
horizontal_flip=True,
zoom_range = 0.3)
test_datagen = ImageDataGenerator(rescale= 1./255)

# Generating batches of Augmented data.

train_generator = train_datagen.flow_from_directory(
directory = train_path,
target_size= x.shape[:2],
batch_size = batch_size,
color_mode= "rgb",
class_mode= "categorical")

# test generator

test_generator = test_datagen.flow_from_directory(
directory = test_path,
target_size= x.shape[:2],
batch_size = batch_size,
color_mode= "rgb",
class_mode= "categorical")

# Fitting the model
hist = model.fit_generator(
generator = train_generator,
steps_per_epoch = 1600 // batch_size,
epochs=epochs,
validation_data = test_generator,
validation_steps = 800 // batch_size)

# Plotting train & validation loss
plt.figure()
plt.plot(hist.history["loss"],label = "Train Loss", color = "red")
plt.plot(hist.history["val_loss"],label = "Validation Loss", color = "yellow", linestyle="dashed",markeredgecolor = "purple", markeredgewidth = 2)
plt.title("Model Loss", color = "darkred", size = 13)
plt.legend()
plt.show()

# Plotting train & validation accuracy
plt.figure()
plt.plot(hist.history["accuracy"],label = "Train Accuracy", color = "blue")
plt.plot(hist.history["val_accuracy"],label = "Validation Accuracy", color = "green", linestyle="dashed",markeredgecolor = "purple", markeredgewidth = 2)
plt.title("Model Accuracy", color = "darkred", size = 13)
plt.legend()
plt.show()